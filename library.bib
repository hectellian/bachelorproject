@misc{bar-elSorcererApprenticeGuide2004,
  title = {The {{Sorcerer}}'s {{Apprentice Guide}} to {{Fault Attacks}}},
  author = {{Bar-El}, Hagai and Choukri, Hamid and Naccache, David and Tunstall, Michael and Whelan, Claire},
  year = {2004},
  number = {2004/100},
  urldate = {2024-04-17},
  abstract = {The effect of faults on electronic systems has been studied since the 1970s when it was noticed that radioactive particles caused errors in chips. This led to further research on the effect of charged particles on silicon, motivated by the aerospace industry who was becoming concerned about the effect of faults in airborn electronic systems. Since then various mechanisms for fault creation and propagation have been discovered and researched. This paper covers the various methods that can be used to induce faults in semiconductors and exploit such errors maliciously. Several examples of attacks stemming from the exploiting of faults are explained. Finally a series of countermeasures to thwart these attacks are described.},
  annotation = {Publication info: Published elsewhere. Unknown where it was published},
  file = {/home/hectellian/Zotero/storage/QYX38U7P/Bar-El et al. - 2004 - The Sorcererâ€™s Apprentice Guide to Fault Attacks.pdf}
}

@book{bhuniaHardwareSecurityHandson2018,
  title = {Hardware {{Security}}: {{A Hands-on Learning Approach}}},
  shorttitle = {Hardware {{Security}}},
  author = {Bhunia, Swarup and Tehranipoor, Mark},
  year = {2018},
  month = oct,
  edition = {1st},
  publisher = {Morgan Kaufmann Publishers Inc.},
  address = {San Francisco, CA, USA},
  abstract = {Hardware Security: A Hands-On Learning Approach provides a broad, comprehensive and practical overview of hardware security that encompasses all levels of the electronic hardware infrastructure. It covers basic concepts like advanced attack techniques and countermeasures that are illustrated through theory, case studies and well-designed, hands-on laboratory exercises for each key concept. The book is ideal as a textbook for upper-level undergraduate students studying computer engineering, computer science, electrical engineering, and biomedical engineering, but is also a handy reference for graduate students, researchers and industry professionals. For academic courses, the book contains a robust suite of teaching ancillaries. Users will be able to access schematic, layout and design files for a printed circuit board for hardware hacking (i.e. the HaHa board) that can be used by instructors to fabricate boards, a suite of videos that demonstrate different hardware vulnerabilities, hardware attacks and countermeasures, and a detailed description and user manual for companion materials. Provides a thorough overview of computer hardware, including the fundamentals of computer systems and the implications of security risks Includes discussion of the liability, safety and privacy implications of hardware and software security and interaction Gives insights on a wide range of security, trust issues and emerging attacks and protection mechanisms in the electronic hardware lifecycle, from design, fabrication, test, and distribution, straight through to supply chain and deployment in the field},
  isbn = {978-0-12-812477-2}
}

@misc{bittnerForgottenThreatVoltage2021,
  title = {The {{Forgotten Threat}} of {{Voltage Glitching}}: {{A Case Study}} on {{Nvidia Tegra X2 SoCs}}},
  shorttitle = {The {{Forgotten Threat}} of {{Voltage Glitching}}},
  author = {Bittner, Otto and Krachenfels, Thilo and Galauner, Andreas and Seifert, Jean-Pierre},
  year = {2021},
  month = aug,
  number = {arXiv:2108.06131},
  eprint = {2108.06131},
  primaryclass = {cs},
  publisher = {arXiv},
  urldate = {2024-04-15},
  abstract = {Voltage fault injection (FI) is a well-known attack technique that can be used to force faulty behavior in processors during their operation. Glitching the supply voltage can cause data value corruption, skip security checks, or enable protected code paths. At the same time, modern systems on a chip (SoCs) are used in security-critical applications, such as self-driving cars and autonomous machines. Since these embedded devices are often physically accessible by attackers, vendors must consider device tampering in their threat models. However, while the threat of voltage FI is known since the early 2000s, it seems as if vendors still forget to integrate countermeasures. This work shows how the entire boot security of an Nvidia SoC, used in Tesla's autopilot and Mercedes-Benz's infotainment system, can be circumvented using voltage FI. We uncover a hidden bootloader that is only available to the manufacturer for testing purposes and disabled by fuses in shipped products. We demonstrate how to re-enable this bootloader using FI to gain code execution with the highest privileges, enabling us to extract the bootloader's firmware and decryption keys used in later boot stages. Using a hardware implant, an adversary might misuse the hidden bootloader to bypass trusted code execution even during the system's regular operation.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/home/hectellian/Zotero/storage/FASQWYH4/Bittner et al. - 2021 - The Forgotten Threat of Voltage Glitching A Case .pdf;/home/hectellian/Zotero/storage/2VGNE92W/2108.html}
}

@inproceedings{brierCorrelationPowerAnalysis2004,
  title = {Correlation {{Power Analysis}} with a {{Leakage Model}}},
  booktitle = {Cryptographic {{Hardware}} and {{Embedded Systems}} - {{CHES}} 2004},
  author = {Brier, Eric and Clavier, Christophe and Olivier, Francis},
  editor = {Joye, Marc and Quisquater, Jean-Jacques},
  year = {2004},
  pages = {16--29},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-540-28632-5_2},
  abstract = {A classical model is used for the power consumption of cryptographic devices. It is based on the Hamming distance of the data handled with regard to an unknown but constant reference state. Once validated experimentally it allows an optimal attack to be derived called Correlation Power Analysis. It also explains the defects of former approaches such as Differential Power Analysis.},
  isbn = {978-3-540-28632-5},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/VHIHPWI5/Brier et al. - 2004 - Correlation Power Analysis with a Leakage Model.pdf}
}

@article{BufferOverflow2024,
  title = {Buffer Overflow},
  year = {2024},
  month = mar,
  journal = {Wikipedia},
  urldate = {2024-05-27},
  abstract = {In programming and information security, a buffer overflow or buffer overrun is an anomaly whereby a program writes data to a buffer beyond the buffer's allocated memory, overwriting adjacent memory locations. Buffers are areas of memory set aside to hold data, often while moving it from one section of a program to another, or between programs. Buffer overflows can often be triggered by malformed inputs; if one assumes all inputs will be smaller than a certain size and the buffer is created to be that size, then an anomalous transaction that produces more data could cause it to write past the end of the buffer. If this overwrites adjacent data or executable code, this may result in erratic program behavior, including memory access errors, incorrect results, and crashes. Exploiting the behavior of a buffer overflow is a well-known security exploit. On many systems, the memory layout of a program, or the system as a whole, is well defined. By sending in data designed to cause a buffer overflow, it is possible to write into areas known to hold executable code and replace it with malicious code, or to selectively overwrite data pertaining to the program's state, therefore causing behavior that was not intended by the original programmer. Buffers are widespread in operating system (OS) code, so it is possible to make attacks that perform privilege escalation and gain unlimited access to the computer's resources. The famed Morris worm in 1988 used this as one of its attack techniques. Programming languages commonly associated with buffer overflows include C and C++, which provide no built-in protection against accessing or overwriting data in any part of memory and do not automatically check that data written to an array (the built-in buffer type) is within the boundaries of that array. Bounds checking can prevent buffer overflows, but requires additional code and processing time. Modern operating systems use a variety of techniques to combat malicious buffer overflows, notably by randomizing the layout of memory, or deliberately leaving space between buffers and looking for actions that write into those areas ("canaries").},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1215860088}
}

@misc{burkeIntelUnleashesComprehensive,
  title = {Intel {{Unleashes}} '{{Comprehensive}}' {{Threat Mitigation Response To Spectre And Meltdown Security Vulnerabilities}} {\textbar} {{CRN}}},
  author = {Burke, Steven},
  urldate = {2024-04-10},
  abstract = {Intel says it is 'rapidly issuing' updates for all types of Intel-based computer systems -- including personal computers and servers -- that render those systems 'immune' from the Spectre and Meltdown security exploits.},
  howpublished = {https://www.crn.com/news/security/300097426/intel-unleashes-comprehensive-threat-mitigation-response-to-spectre-and-meltdown-security-vulnerabilities},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/K72XJIR3/intel-unleashes-comprehensive-threat-mitigation-response-to-spectre-and-meltdown-security-vulne.html}
}

@inproceedings{changSecureSystemDesign2016,
  title = {Secure {{System Design}} and {{Trustable Computing}}},
  editor = {Chang, Chip-Hong and Potkonjak, Miodrag},
  year = {2016},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-319-14971-4},
  urldate = {2024-04-10},
  abstract = {This book provides the foundations for understanding hardware security and trust, which have become major concerns for national security over the past decade. Coverage includes issues related to security and trust in a variety of electronic devices and systems related to the security of hardware, firmware and software, spanning system applications, online transactions and networking services. This serves as an invaluable reference to the state-of-the-art research that is of critical significance to the security of and trust in, modern societys microelectronic-supported infrastructures.},
  copyright = {https://www.springernature.com/gp/researchers/text-and-data-mining},
  isbn = {978-3-319-14970-7 978-3-319-14971-4},
  langid = {english}
}

@misc{computersecuritydivisionHardwareSecurityCSRC2022,
  title = {Hardware {{Security}} {\textbar} {{CSRC}} {\textbar} {{CSRC}}},
  author = {Computer Security Division, Information Technology Laboratory},
  year = {2022},
  month = may,
  journal = {CSRC {\textbar} NIST},
  urldate = {2024-04-10},
  abstract = {Proposed Activities {\textbar} Previous and Current Activities {\textbar} Contact Us    Semiconductor-based hardware is the foundation of modern-day electronics. Electronics are ubiquitous in our daily lives: from smartphones, computers, and telecommunication to transportation and critical infrastructure like power grids and waterways. The semiconductor hardware supply chain is a complex network consisting of many companies that collectively provide intellectual property, create designs, provide raw materials, and manufacture, test, package, and distribute products. Coordination among these companies is required at different stages from inception to end user, as well as maintenance during use and eventually disposal or end of life. Securing semiconductors and hardware and their supply chains helps protect sensitive information, maintain integrity of systems, and ensure overall stability across the infrastructure and connected world.  NIST's Hardware Security Program builds on NIST leadership, expertise, and experience in...},
  howpublished = {https://csrc.nist.gov/projects/hardware-security},
  langid = {american}
}

@misc{computersecuritydivisionPostQuantumCryptographyCSRC2017,
  title = {Post-{{Quantum Cryptography}} {\textbar} {{CSRC}} {\textbar} {{CSRC}}},
  author = {Computer Security Division, Information Technology Laboratory},
  year = {2017},
  month = jan,
  journal = {CSRC {\textbar} NIST},
  urldate = {2024-04-10},
  abstract = {Public comments are available for~Draft FIPS 203, Draft FIPS 204 and Draft FIPS 205, which specify algorithms derived from CRYSTALS-Dilithium, CRYSTALS-KYBER and SPHINCS+.~ The public comment period closed November 22, 2023.  PQC Seminars Next Talk:~ April 23, 2024  4th Round KEMs ~  Additional Digital Signature Schemes -~Round 1 Submissions  PQC License Summary \& Excerpts   Background  NIST initiated a process to solicit, evaluate, and standardize one or more quantum-resistant public-key cryptographic algorithms.~~Full details can be found in the Post-Quantum Cryptography Standardization page.~~  In recent years, there has been a substantial amount of research on quantum computers -- machines that exploit quantum mechanical phenomena to solve mathematical problems that are difficult or intractable for conventional computers. If large-scale quantum computers are ever built, they will be able to break many of the public-key cryptosystems currently in use. This would seriously compromise the confidentiality and...},
  howpublished = {https://csrc.nist.gov/projects/post-quantum-cryptography},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/AH8CEIBL/post-quantum-cryptography.html}
}

@misc{costanIntelSGXExplained2016,
  title = {Intel {{SGX Explained}}},
  author = {Costan, Victor and Devadas, Srinivas},
  year = {2016},
  number = {2016/086},
  urldate = {2024-04-10},
  abstract = {Intel's Software Guard Extensions (SGX) is a set of extensions to the Intel architecture that aims to provide integrity and privacy guarantees to security-sensitive computation performed on a computer where all the privileged software (kernel, hypervisor, etc) is potentially malicious. This paper analyzes Intel SGX, based on the 3 papers that introduced it, on the Intel Software Developer's Manual (which supersedes the SGX manuals), on an ISCA 2015 tutorial, and on two patents. We use the papers, reference manuals, and tutorial as primary data sources, and only draw on the patents to fill in missing information. This paper's contributions are a summary of the Intel-specific architectural and micro-architectural details needed to understand SGX, a detailed and structured presentation of the publicly available information on SGX, a series of intelligent guesses about some important but undocumented aspects of SGX, and an analysis of SGX's security properties.},
  annotation = {Publication info: Preprint.},
  file = {/home/hectellian/Zotero/storage/85WE3K2F/Costan and Devadas - 2016 - Intel SGX Explained.pdf}
}

@misc{ctoHistoryHardwareSecurity2022,
  title = {A {{History}} of {{Hardware Security}} and {{What}} It {{Means}} for {{Today}}'s {{Systems}}},
  author = {CTO, Cofounder and, Jason Oberg},
  year = {2022},
  month = mar,
  journal = {Cycuity},
  urldate = {2024-04-10},
  abstract = {Although semiconductors provide the foundation of every modern electronic computing system, it's difficult for most people to imagine the consequences of a hardware security incident on their own lives.},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/8NVIKFBS/history-of-hardware-security.html}
}

@article{DigitalRightsManagement2024,
  title = {Digital Rights Management},
  year = {2024},
  month = mar,
  journal = {Wikipedia},
  urldate = {2024-04-15},
  abstract = {Digital rights management (DRM) is the management of legal access to digital content. Various tools or technological protection measures (TPM), such as access control technologies, can restrict the use of proprietary hardware and copyrighted works. DRM technologies govern the use, modification and distribution of copyrighted works (e.g. software, multimedia content) and of systems that enforce these policies within devices. DRM technologies include licensing agreements and encryption.Laws in many countries criminalize the circumvention of DRM, communication about such circumvention, and the creation and distribution of tools used for such circumvention. Such laws are part of the United States' Digital Millennium Copyright Act (DMCA), and the European Union's Information Society Directive -- with the French DADVSI an example of a member state of the European Union implementing that directive.Copyright holders argue that DRM technologies are necessary to protect intellectual property, just as physical locks prevent personal property from theft. For examples, they can help the copyright holders for maintaining artistic controls, and supporting licenses' modalities such as rentals. Industrial users (i.e. industries) have expanded the use of DRM technologies to various hardware products, such as Keurig's coffeemakers, Philips' light bulbs, mobile device power chargers, and John Deere's tractors. For instance, tractor companies try to prevent farmers from making repairs via DRM.DRM is controversial. There is an absence of evidence about the DRM capability in preventing copyright infringement, some complaints by legitimate customers for caused inconveniences, and a suspicion of stifling innovation and competition. Furthermore, works can become permanently inaccessible if the DRM scheme changes or if a required service is discontinued. DRM technologies have been criticized for restricting individuals from copying or using the content legally, such as by fair use or by making backup copies. DRM is in common use by the entertainment industry (e.g., audio and video publishers). Many online stores such as OverDrive use DRM technologies, as do cable and satellite service operators. Apple removed DRM technology from iTunes around 2009. Typical DRM also prevents lending materials out through a library, or accessing works in the public domain.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1215486134},
  file = {/home/hectellian/Zotero/storage/5TNGINKK/Digital_rights_management.html}
}

@misc{DocsMan1Man3,
  title = {/Docs/Man1.1.1/Man3/{{CRYPTO}}\_memcmp.Html},
  urldate = {2024-04-10},
  howpublished = {https://www.openssl.org/docs/man1.1.1/man3/CRYPTO\_memcmp.html},
  file = {/home/hectellian/Zotero/storage/Y2T5IT62/CRYPTO_memcmp.html}
}

@misc{editorsChallengesSecuringToday2021,
  title = {The {{Challenges}} of {{Securing Today}}'s {{Hardware Technologies}} (and {{How}} to {{Overcome Them}})},
  author = {EDITORS, eWEEK},
  year = {2021},
  month = nov,
  journal = {eWEEK},
  urldate = {2024-04-10},
  abstract = {Factors like new, disruptive research and an expanding risk factor make securing hardware a major challenge --~yet security can be greatly improved.},
  howpublished = {https://www.eweek.com/security/the-challenges-of-securing-todays-hardware-technologies-and-how-to-overcome-them/},
  langid = {american}
}

@book{ericksonHackingArtExploitation2008,
  title = {Hacking : The Art of Exploitation},
  shorttitle = {Hacking},
  author = {Erickson, Jon},
  year = {2008},
  publisher = {San Francisco, Calif. : No Starch Press},
  urldate = {2024-04-10},
  abstract = {Hacking the art of Exploitation; 1 online resource (x, 472 pages) :; Hacking is the art of creative problem solving, whether that means finding an unconventional solution to a difficult problem or exploiting holes in sloppy programming. Rather than merely showing how to run existing exploits, Hacking: The Art of Exploitation, 2nd Edition author Jon Erickson explains how arcane hacking techniques actually work. Using the included Ubuntu LiveCD, get your hands dirty debugging code, overflowing buffers, hijacking network communications, bypassing protections, exploiting cryptographic weaknesses, and perhaps even inventing new exploits; Includes bibliographical references and index; 1. Introduction -- 2. Programming -- 3. Exploitation -- 4. Networking -- 5. Shellcode -- 6. Countermeasures -- 7. Cryptology -- 8. Conclusion; Print version record},
  isbn = {978-1-59327-338-5 978-1-59327-144-2},
  langid = {english},
  keywords = {Hacking}
}

@misc{galaunerGlitchingSwitch0200,
  title = {Glitching the {{Switch}}},
  author = {Galauner, Andreas},
  year = {02:00:00 +0200},
  urldate = {2024-04-17},
  abstract = {About a year ago Nintendo released its newest gaming console which is a hybrid between a stationary and handheld gaming platform: The Nin...},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/X7AEHTZS/c4.openchaos.2018.06.html}
}

@article{gentryFULLYHOMOMORPHICENCRYPTION,
  title = {A {{FULLY HOMOMORPHIC ENCRYPTION SCHEME}}},
  author = {Gentry, Craig},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/3KDQ9NB8/Gentry - A FULLY HOMOMORPHIC ENCRYPTION SCHEME.pdf}
}

@misc{GrapheneStrongLightweight,
  title = {Graphene: {{Strong}} yet {{Lightweight Row Hammer Protection}} {\textbar} {{IEEE Conference Publication}} {\textbar} {{IEEE Xplore}}},
  urldate = {2024-04-17},
  howpublished = {https://ieeexplore.ieee.org/abstract/document/9251863},
  file = {/home/hectellian/Zotero/storage/2KCGY57H/9251863.html}
}

@article{haldermanLestWeRemember2009,
  title = {Lest We Remember: Cold-Boot Attacks on Encryption Keys},
  shorttitle = {Lest We Remember},
  author = {Halderman, J. Alex and Schoen, Seth D. and Heninger, Nadia and Clarkson, William and Paul, William and Calandrino, Joseph A. and Feldman, Ariel J. and Appelbaum, Jacob and Felten, Edward W.},
  year = {2009},
  month = may,
  journal = {Communications of the ACM},
  volume = {52},
  number = {5},
  pages = {91--98},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1506409.1506429},
  urldate = {2024-04-10},
  abstract = {Contrary to popular assumption, DRAMs used in most modern computers retain their contents for several seconds after power is lost, even at room temperature and even if removed from a motherboard. Although DRAMs become less reliable when they are not refreshed, they are not immediately erased, and their contents persist sufficiently for malicious (or forensic) acquisition of usable full-system memory images. We show that this phenomenon limits the ability of an operating system to protect cryptographic key material from an attacker with physical access. We use cold reboots to mount successful attacks on popular disk encryption systems using no special devices or materials. We experimentally characterize the extent and predictability of memory remanence and report that remanence times can be increased dramatically with simple cooling techniques. We offer new algorithms for finding cryptographic keys in memory images and for correcting errors caused by bit decay. Though we discuss several strategies for partially mitigating these risks, we know of no simple remedy that would eliminate them.},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/RHQLX6FQ/Halderman et al. - 2009 - Lest we remember cold-boot attacks on encryption .pdf}
}

@article{HardwareSecurity2023,
  title = {Hardware Security},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  urldate = {2024-04-10},
  abstract = {Hardware security is a discipline originated from the cryptographic engineering and involves hardware design, access control, secure multi-party computation, secure key storage, ensuring code authenticity, measures to ensure that the supply chain that built the product is secure among other things.A hardware security module (HSM) is a physical computing device that safeguards and manages digital keys for strong authentication and provides cryptoprocessing. These modules traditionally come in the form of a plug-in card or an external device that attaches directly to a computer or network server. Some providers in this discipline consider that the key difference between hardware security and software security is that hardware security is implemented using "non-Turing-machine" logic (raw combinatorial logic or simple state machines). One approach, referred to as "hardsec", uses FPGAs to implement non-Turing-machine security controls as a way of combining the security of hardware with the flexibility of software.Hardware backdoors are backdoors in hardware. Conceptionally related, a hardware Trojan (HT) is a malicious modification of electronic system, particularly in the context of integrated circuit.A physical unclonable function (PUF) is a physical entity that is embodied in a physical structure and is easy to evaluate but hard to predict. Further, an individual PUF device must be easy to make but practically impossible to duplicate, even given the exact manufacturing process that produced it. In this respect it is the hardware analog of a one-way function. The name "physical unclonable function" might be a little misleading as some PUFs are clonable, and most PUFs are noisy and therefore do not achieve the requirements for a function. Today, PUFs are usually implemented in integrated circuits and are typically used in applications with high security requirements. Many attacks on sensitive data and resources reported by organizations occur from within the organization itself.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1191140417},
  file = {/home/hectellian/Zotero/storage/UJ36N7E4/Hardware_security.html}
}

@misc{HowDidNintendo2020,
  title = {How Did {{Nintendo}} Patch the {{RCM}} Exploit?},
  year = {2020},
  month = aug,
  journal = {GBAtemp.net - The Independent Video Game Community},
  urldate = {2024-02-23},
  abstract = {I'd like to know how it worked in the first place and what they did to fix it I'd also like to know how SX's chip works, what is it doing to the Switch? And is there hope for an exploit similar to the RCM exploit in the future? I'm guessing the answer is no but I'll ask anyway If anyone has...},
  howpublished = {https://gbatemp.net/threads/how-did-nintendo-patch-the-rcm-exploit.571615/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/NR9QQGLG/how-did-nintendo-patch-the-rcm-exploit.571615.html}
}

@misc{InfineonRSAKey2021,
  title = {Infineon {{RSA Key Generation Issue}} - {{Customer Portal}}},
  year = {2021},
  month = may,
  journal = {Yubico},
  urldate = {2024-04-17},
  abstract = {Infineon Technologies, one of Yubico's secure element vendors, informed Yubico of a security issue in their firmware cryptographic libraries. The security issue was found on June 6, 2017 and affect...},
  howpublished = {https://support.yubico.com/hc/en-us/articles/360021803580-Infineon-RSA-Key-Generation-Issue-Customer-Portal},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/TNLHAV8N/360021803580-Infineon-RSA-Key-Generation-Issue-Customer-Portal.html}
}

@book{IntroductionHardwareSecurity,
  title = {Introduction to {{Hardware Security}} and {{Trust}}},
  urldate = {2024-04-10},
  langid = {english}
}

@article{jinIntroductionHardwareSecurity2015,
  title = {Introduction to {{Hardware Security}}},
  author = {Jin, Yier},
  year = {2015},
  month = dec,
  journal = {Electronics},
  volume = {4},
  number = {4},
  pages = {763--784},
  publisher = {Multidisciplinary Digital Publishing Institute},
  issn = {2079-9292},
  doi = {10.3390/electronics4040763},
  urldate = {2024-04-10},
  abstract = {Hardware security has become a hot topic recently with more and more researchers from related research domains joining this area. However, the understanding of hardware security is often mixed with cybersecurity and cryptography, especially cryptographic hardware. For the same reason, the research scope of hardware security has never been clearly defined. To help researchers who have recently joined in this area better understand the challenges and tasks within the hardware security domain and to help both academia and industry investigate countermeasures and solutions to solve hardware security problems, we will introduce the key concepts of hardware security as well as its relations to related research topics in this survey paper. Emerging hardware security topics will also be clearly depicted through which the future trend will be elaborated, making this survey paper a good reference for the continuing research efforts in this area.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {hardware security,hardware trojan,proof-carrying hardware,trusted hardware platform},
  file = {/home/hectellian/Zotero/storage/ZHEKFKVH/Jin - 2015 - Introduction to Hardware Security.pdf}
}

@inproceedings{kavandSecuringHardwareReconfigurable2022,
  title = {Securing {{Hardware}} through {{Reconfigurable Nano-Structures}}},
  booktitle = {Proceedings of the 41st {{IEEE}}/{{ACM International Conference}} on {{Computer-Aided Design}}},
  author = {Kavand, Nima and Darjani, Armin and Rai, Shubham and Kumar, Akash},
  year = {2022},
  month = dec,
  series = {{{ICCAD}} '22},
  pages = {1--7},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/3508352.3561116},
  urldate = {2024-04-17},
  abstract = {Hardware security has been an ever-growing concern of the integrated circuit (IC) designers. Through different stages in the IC design and life cycle, an adversary can extract sensitive design information and private data stored in the circuit using logical, physical, and structural weaknesses. Besides, in recent times, ML-based attacks have become the new de facto standard in hardware security community. Contemporary defense strategies are often facing unforeseen challenges to cope up with these attack schemes. Additionally, the high overhead of the CMOS-based secure addon circuitry and intrinsic limitations of these devices indicate the need for new nano-electronics. Emerging reconfigurable devices like Reconfigurable Field Effect transistors (RFETs) provide unique features to fortify the design against various threats at different stages in the IC design and life cycle. In this manuscript, we investigate the applications of the RFETs for securing the design against traditional and machine learning (ML)-based intellectual property (IP) piracy techniques and side-channel attacks (SCAs).},
  isbn = {978-1-4503-9217-4},
  keywords = {HW security,IP protection,reconigurable nano-structures,RFET,side-channel attacks},
  file = {/home/hectellian/Zotero/storage/3LBRJKFF/Kavand et al. - 2022 - Securing Hardware through Reconfigurable Nano-Stru.pdf}
}

@book{kentEncyclopediaComputerScience1993,
  title = {Encyclopedia of {{Computer Science}} and {{Technology}}: {{Volume}} 28 - {{Supplement}} 13: {{AerosPate Applications}} of {{Artificial Intelligence}} to {{Tree Structures}}},
  shorttitle = {Encyclopedia of {{Computer Science}} and {{Technology}}},
  author = {Kent, Allen and Williams, James G.},
  year = {1993},
  month = apr,
  publisher = {CRC Press},
  abstract = {"This comprehensive reference work provides immediate, fingertip access to state-of-the-art technology in nearly 700 self-contained articles written by over 900 international authorities. Each article in the Encyclopedia features current developments and trends in computers, software, vendors, and applications...extensive bibliographies of leading figures in the field, such as Samuel Alexander, John von Neumann, and Norbert Wiener...and in-depth analysis of future directions."},
  googlebooks = {EjWV8J8CQEYC},
  isbn = {978-0-8247-2281-4},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / General}
}

@inproceedings{kimFlippingBitsMemory2014,
  title = {Flipping Bits in Memory without Accessing Them: {{An}} Experimental Study of {{DRAM}} Disturbance Errors},
  shorttitle = {Flipping Bits in Memory without Accessing Them},
  booktitle = {2014 {{ACM}}/{{IEEE}} 41st {{International Symposium}} on {{Computer Architecture}} ({{ISCA}})},
  author = {Kim, Yoongu and Daly, Ross and Kim, Jeremie and Fallin, Chris and Lee, Ji Hye and Lee, Donghyuk and Wilkerson, Chris and Lai, Konrad and Mutlu, Onur},
  year = {2014},
  month = jun,
  pages = {361--372},
  publisher = {IEEE},
  address = {Minneapolis, MN, USA},
  doi = {10.1109/ISCA.2014.6853210},
  urldate = {2024-04-10},
  abstract = {Memory isolation is a key property of a reliable and secure computing system --- an access to one memory address should not have unintended side effects on data stored in other addresses. However, as DRAM process technology scales down to smaller dimensions, it becomes more difficult to prevent DRAM cells from electrically interacting with each other. In this paper, we expose the vulnerability of commodity DRAM chips to disturbance errors. By reading from the same address in DRAM, we show that it is possible to corrupt data in nearby addresses. More specifically, activating the same row in DRAM corrupts data in nearby rows. We demonstrate this phenomenon on Intel and AMD systems using a malicious program that generates many DRAM accesses. We induce errors in most DRAM modules (110 out of 129) from three major DRAM manufacturers. From this we conclude that many deployed systems are likely to be at risk. We identify the root cause of disturbance errors as the repeated toggling of a DRAM row's wordline, which stresses inter-cell coupling effects that accelerate charge leakage from nearby rows. We provide an extensive characterization study of disturbance errors and their behavior using an FPGA-based testing platform. Among our key findings, we show that (i) it takes as few as 139K accesses to induce an error and (ii) up to one in every 1.7K cells is susceptible to errors. After examining various potential ways of addressing the problem, we propose a low-overhead solution to prevent the errors.},
  isbn = {978-1-4799-4394-4 978-1-4799-4396-8},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/3DFAG8LF/Kim et al. - 2014 - Flipping bits in memory without accessing them An.pdf}
}

@inproceedings{kocherDifferentialPowerAnalysis1999,
  title = {Differential {{Power Analysis}}},
  booktitle = {Advances in {{Cryptology}} --- {{CRYPTO}}' 99},
  author = {Kocher, Paul and Jaffe, Joshua and Jun, Benjamin},
  editor = {Wiener, Michael},
  year = {1999},
  pages = {388--397},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/3-540-48405-1_25},
  abstract = {Cryptosystem designers frequently assume that secrets will be manipulated in closed, reliable computing environments. Unfortunately, actual computers and microchips leak information about the operations they process. This paper examines specific methods for analyzing power consumption measurements to find secret keys from tamper resistant devices. We also discuss approaches for building cryptosystems that can operate securely in existing hardware that leaks information.},
  isbn = {978-3-540-48405-9},
  langid = {english},
  keywords = {cryptanalysis,DES,differential power analysis,DPA,SPA},
  file = {/home/hectellian/Zotero/storage/5HUIBN26/Kocher et al. - 1999 - Differential Power Analysis.pdf}
}

@misc{kocherSpectreAttacksExploiting2018,
  title = {Spectre {{Attacks}}: {{Exploiting Speculative Execution}}},
  shorttitle = {Spectre {{Attacks}}},
  author = {Kocher, Paul and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access to the victim's memory and registers, and can perform operations with measurable side effects. Spectre attacks involve inducing a victim to speculatively perform operations that would not occur during correct program execution and which leak the victim's confidential information via a side channel to the adversary. This paper describes practical attacks that combine methodology from side channel attacks, fault attacks, and return-oriented programming that can read arbitrary memory from the victim's process. More broadly, the paper shows that speculative execution implementations violate the security assumptions underpinning numerous software security mechanisms, including operating system process separation, static analysis, containerization, just-in-time (JIT) compilation, and countermeasures to cache timing/side-channel attacks. These attacks represent a serious threat to actual systems, since vulnerable speculative execution capabilities are found in microprocessors from Intel, AMD, and ARM that are used in billions of devices. While makeshift processor-specific countermeasures are possible in some cases, sound solutions will require fixes to processor designs as well as updates to instruction set architectures (ISAs) to give hardware architects and software developers a common understanding as to what computation state CPU implementations are (and are not) permitted to leak.},
  howpublished = {https://arxiv.org/abs/1801.01203v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/8LSQ7BNN/Kocher et al. - 2018 - Spectre Attacks Exploiting Speculative Execution.pdf}
}

@inproceedings{kocherTimingAttacksImplementations1996,
  title = {Timing {{Attacks}} on {{Implementations}} of {{Diffie-Hellman}}, {{RSA}}, {{DSS}}, and {{Other Systems}}},
  booktitle = {Advances in {{Cryptology}} --- {{CRYPTO}} '96},
  author = {Kocher, Paul C.},
  editor = {Koblitz, Neal},
  year = {1996},
  pages = {104--113},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/3-540-68697-5_9},
  abstract = {By carefully measuring the amount of time required to perform private key operations, attackers may be able to find fixed Diffie-Hellman exponents, factor RSA keys, and break other cryptosystems. Against a vulnerable system, the attack is computationally inexpensive and often requires only known ciphertext. Actual systems are potentially at risk, including cryptographic tokens, network-based cryptosystems, and other applications where attackers can make reasonably accurate timing measurements. Techniques for preventing the attack for RSA and Diffie-Hellman are presented. Some cryptosystems will need to be revised to protect against the attack, and new protocols and algorithms may need to incorporate measures to prevent timing attacks.},
  isbn = {978-3-540-68697-2},
  langid = {english},
  keywords = {cryptanalysis,Diffie-Hellman,DSS,RSA,timing attack},
  file = {/home/hectellian/Zotero/storage/IPXVL3UF/Kocher - 1996 - Timing Attacks on Implementations of Diffie-Hellma.pdf}
}

@article{kushnerRealStoryStuxnet2013,
  title = {The Real Story of Stuxnet},
  author = {Kushner, David},
  year = {2013},
  month = mar,
  journal = {IEEE Spectrum},
  volume = {50},
  number = {3},
  pages = {48--53},
  issn = {1939-9340},
  doi = {10.1109/MSPEC.2013.6471059},
  urldate = {2024-04-17},
  abstract = {The paper discusses how Kaspersky Lab tracked down the malware that stymied Iran's nuclear-fuel enrichment program.},
  keywords = {Companies,Computer hacking,Computer security,Computer viruses,Cryptography,Malware},
  file = {/home/hectellian/Zotero/storage/YZD2ELDT/Kushner - 2013 - The real story of stuxnet.pdf}
}

@inproceedings{lampsonLazySpeculativeExecution2006,
  title = {Lazy and {{Speculative Execution}} in {{Computer Systems}}},
  booktitle = {Principles of {{Distributed Systems}}},
  author = {Lampson, Butler},
  editor = {Shvartsman, Mariam Momenzadeh Alexander A.},
  year = {2006},
  pages = {1--2},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/11945529_1},
  abstract = {The distinction between lazy and eager (or strict) evaluation has been studied in programming languages since Algol 60s call by name, as a way to avoid unnecessary work and to deal gracefully with infinite structures such as streams. It is deeply integrated in some languages, notably Haskell, and can be simulated in many languages by wrapping a lazy expression in a lambda.},
  isbn = {978-3-540-49991-6},
  langid = {english}
}

@misc{lawsonHowPS3Hypervisor2010,
  title = {How the {{PS3}} Hypervisor Was Hacked},
  author = {Lawson, {\textasciitilde} Nate},
  year = {2010},
  month = jan,
  journal = {rdist},
  urldate = {2024-04-17},
  abstract = {George Hotz, previously known as an iPhone hacker, announced that he hacked the Playstation 3 and then provided exploit details. Various articles have been written about this but none of them appea{\dots}},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/ZLJFZEBR/how-the-ps3-hypervisor-was-hacked.html}
}

@misc{lippMeltdown2018,
  title = {Meltdown},
  author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {The security of computer systems fundamentally relies on memory isolation, e.g., kernel address ranges are marked as non-accessible and are protected from user access. In this paper, we present Meltdown. Meltdown exploits side effects of out-of-order execution on modern processors to read arbitrary kernel-memory locations including personal data and passwords. Out-of-order execution is an indispensable performance feature and present in a wide range of modern processors. The attack works on different Intel microarchitectures since at least 2010 and potentially other processors are affected. The root cause of Meltdown is the hardware. The attack is independent of the operating system, and it does not rely on any software vulnerabilities. Meltdown breaks all security assumptions given by address space isolation as well as paravirtualized environments and, thus, every security mechanism building upon this foundation. On affected systems, Meltdown enables an adversary to read memory of other processes or virtual machines in the cloud without any permissions or privileges, affecting millions of customers and virtually every user of a personal computer. We show that the KAISER defense mechanism for KASLR has the important (but inadvertent) side effect of impeding Meltdown. We stress that KAISER must be deployed immediately to prevent large-scale exploitation of this severe information leakage.},
  howpublished = {https://arxiv.org/abs/1801.01207v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/4235IMHY/Lipp et al. - 2018 - Meltdown.pdf}
}

@inproceedings{maitiLargeScaleCharacterization2010,
  title = {A Large Scale Characterization of {{RO-PUF}}},
  booktitle = {2010 {{IEEE International Symposium}} on {{Hardware-Oriented Security}} and {{Trust}} ({{HOST}})},
  author = {Maiti, Abhranil and Casarona, Jeff and McHale, Luke and Schaumont, Patrick},
  year = {2010},
  month = jun,
  pages = {94--99},
  doi = {10.1109/HST.2010.5513108},
  urldate = {2024-04-10},
  abstract = {To validate the effectiveness of a Physical Unclonable Function (PUF), it needs to be characterized over a large population of chips. Though simulation methods can provide approximate results, an on-chip experiment produces more accurate result. In this paper, we characterize a PUF based on ring oscillator (RO) using a significantly large population of 125 FPGAs. We analyze the experimental data using a ring oscillator loop delay model, and quantify the quality factors of a PUF such as uniqueness and reliability. The RO-PUF shows an average inter-die Hamming distance of 47.31\%, and an average intra-die Hamming distance of 0.86\% at normal operating condition. Additionally, we intend to make this large RO frequency dataset available publicly for the research community.},
  keywords = {Authentication,Circuits,Data analysis,Delay,Field programmable gate arrays,Frequency,Hamming distance,Large-scale systems,Ring oscillators,Semiconductor device measurement},
  file = {/home/hectellian/Zotero/storage/W5ZM3Y73/Maiti et al. - 2010 - A large scale characterization of RO-PUF.pdf;/home/hectellian/Zotero/storage/ERVWUNM5/5513108.html}
}

@article{MeltdownSecurityVulnerability2024,
  title = {Meltdown (Security Vulnerability)},
  year = {2024},
  month = mar,
  journal = {Wikipedia},
  urldate = {2024-04-15},
  abstract = {Meltdown is one of the two original transient execution CPU vulnerabilities (the other being Spectre). Meltdown affects Intel x86 microprocessors, IBM POWER processors, and some ARM-based microprocessors. It allows a rogue process to read all memory, even when it is not authorized to do so. Meltdown affects a wide range of systems. At the time of disclosure (2018), this included all devices running any but the most recent and patched versions of iOS, Linux, macOS, or Windows. Accordingly, many servers and cloud services were impacted, as well as a potential majority of smart devices and embedded devices using ARM-based processors (mobile devices, smart TVs, printers and others), including a wide range of networking equipment. A purely software workaround to Meltdown has been assessed as slowing computers between 5 and 30 percent in certain specialized workloads, although companies responsible for software correction of the exploit reported minimal impact from general benchmark testing.Meltdown was issued a Common Vulnerabilities and Exposures ID of CVE-2017-5754, also known as Rogue Data Cache Load (RDCL), in January 2018. It was disclosed in conjunction with another exploit, Spectre, with which it shares some characteristics. The Meltdown and Spectre vulnerabilities are considered "catastrophic" by security analysts. The vulnerabilities are so severe that security researchers initially believed the reports to be false.Several procedures to help protect home computers and related devices from the Meltdown and Spectre security vulnerabilities have been published. Meltdown patches may produce performance loss. Spectre patches have been reported to significantly reduce performance, especially on older computers; on the then-newest (2017) eighth-generation Core platforms, benchmark performance drops of 2--14 percent have been measured. On 18 January 2018, unwanted reboots, even for newer Intel chips, due to Meltdown and Spectre patches, were reported. Nonetheless, according to Dell: "No 'real-world' exploits of these vulnerabilities [i.e., Meltdown and Spectre] have been reported to date [26 January 2018], though researchers have produced proof-of-concepts." Dell further recommended: "promptly adopting software updates, avoiding unrecognized hyperlinks and websites, not downloading files or applications from unknown sources ... following secure password protocols ... [using] security software to help protect against malware (advanced threat prevention software or anti-virus)."On 15 March 2018, Intel reported that it would redesign its CPUs to help protect against the Meltdown and related Spectre vulnerabilities (especially, Meltdown and Spectre-V2, but not Spectre-V1), and expected to release the newly redesigned processors later in 2018. On 8 October 2018, Intel is reported to have added hardware and firmware mitigations regarding Spectre and Meltdown vulnerabilities to its latest processors.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1215853086},
  file = {/home/hectellian/Zotero/storage/4F6SUYTS/Meltdown_(security_vulnerability).html}
}

@inproceedings{mofradComparisonStudyIntel2018,
  title = {A Comparison Study of Intel {{SGX}} and {{AMD}} Memory Encryption Technology},
  booktitle = {Proceedings of the 7th {{International Workshop}} on {{Hardware}} and {{Architectural Support}} for {{Security}} and {{Privacy}}},
  author = {Mofrad, Saeid and Zhang, Fengwei and Lu, Shiyong and Shi, Weidong},
  year = {2018},
  month = jun,
  pages = {1--8},
  publisher = {ACM},
  address = {Los Angeles California},
  doi = {10.1145/3214292.3214301},
  urldate = {2024-04-15},
  isbn = {978-1-4503-6500-0},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/WRWVS8WQ/Mofrad et al. - 2018 - A comparison study of intel SGX and AMD memory enc.pdf}
}

@inproceedings{moradiVulnerabilityFPGABitstream2011,
  title = {On the Vulnerability of {{FPGA}} Bitstream Encryption against Power Analysis Attacks: Extracting Keys from Xilinx {{Virtex-II FPGAs}}},
  shorttitle = {On the Vulnerability of {{FPGA}} Bitstream Encryption against Power Analysis Attacks},
  booktitle = {Proceedings of the 18th {{ACM}} Conference on {{Computer}} and Communications Security},
  author = {Moradi, Amir and Barenghi, Alessandro and Kasper, Timo and Paar, Christof},
  year = {2011},
  month = oct,
  series = {{{CCS}} '11},
  pages = {111--124},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  doi = {10.1145/2046707.2046722},
  urldate = {2024-04-10},
  abstract = {Over the last two decades FPGAs have become central components for many advanced digital systems, e.g., video signal processing, network routers, data acquisition and military systems. In order to protect the intellectual property and to prevent fraud, e.g., by cloning a design embedded into an FPGA or manipulating its content, many current FPGAs employ a bitstream encryption feature. We develop a successful attack on the bitstream encryption engine integrated in the widespread Virtex-II Pro FPGAs from Xilinx, using side-channel analysis. After measuring the power consumption of a single power-up of the device and a modest amount of off-line computation, we are able to recover all three different keys used by its triple DES module. Our method allows extracting secret keys from any real-world device where the bitstream encryption feature of Virtex-II Pro is enabled. As a consequence, the target product can be cloned and manipulated at the will of the attacker since no side-channel protection was included into the design of the decryption module. Also, more advanced attacks such as reverse engineering or the introduction of hardware Trojans become potential threats. While performing the side-channel attack, we were able to deduce a hypothetical architecture of the hardware encryption engine. To our knowledge, this is the first attack against the bitstream encryption of a commercial FPGA reported in the open literature.},
  isbn = {978-1-4503-0948-6},
  keywords = {bitstream encryption,FPGA,side-channel attacks,triple des},
  file = {/home/hectellian/Zotero/storage/TQFHQABS/Moradi et al. - 2011 - On the vulnerability of FPGA bitstream encryption .pdf}
}

@inproceedings{ngabonzizaTrustZoneExplainedArchitectural2016,
  title = {{{TrustZone Explained}}: {{Architectural Features}} and {{Use Cases}}},
  shorttitle = {{{TrustZone Explained}}},
  booktitle = {2016 {{IEEE}} 2nd {{International Conference}} on {{Collaboration}} and {{Internet Computing}} ({{CIC}})},
  author = {Ngabonziza, Bernard and Martin, Daniel and Bailey, Anna and Cho, Haehyun and Martin, Sarah},
  year = {2016},
  month = nov,
  pages = {445--451},
  doi = {10.1109/CIC.2016.065},
  urldate = {2024-04-17},
  abstract = {ARM TrustZone is a hardware security extension technology, which aims to provide secure execution environment by splitting computer resources between two execution worlds, namely normal world and secure world. TrustZone is supported on different flavors of ARM architectures, that include architecture deployed on targets running regular applications, such as mobile devices and architecture for micro-controllers. As ARM is widely deployed on the majority of mobile and micro-controller devices, TrustZone's goal is to provide security for those platforms. In this paper, we will discuss details of different ARM architectures that support TrustZone technology. Then, we will review how TrustZone is implemented in the hardware and software of ARM products. We will also compare TrustZone with other implementations of trusted execution environments on the market.},
  keywords = {Computer architecture,Coprocessors,Hardware,Monitoring,Registers,Security,Software},
  file = {/home/hectellian/Zotero/storage/S7HKMGMT/Ngabonziza et al. - 2016 - TrustZone Explained Architectural Features and Us.pdf;/home/hectellian/Zotero/storage/244D3E73/7809736.html}
}

@book{nicolasfalliereW32StuxnetDossier,
  title = {W32 {{Stuxnet Dossier}}},
  author = {Nicolas Falliere, Liam O. Murchu},
  urldate = {2024-04-17},
  abstract = {W32.Stuxnet has gained a lot of attention from researchers and me- dia recently. There is good reason for this. Stuxnet is one of the most complex threats we have analyzed. In this paper we take a de- tailed look at Stuxnet and its various components and particularly focus on the final goal of Stuxnet, which is to reprogram industrial control systems. Stuxnet is a large, complex piece of malware with many different components and functionalities.},
  langid = {english},
  keywords = {stuxnet}
}

@misc{NintendoSwitchJig,
  title = {Nintendo {{Switch Jig}} for {{RCM Loading}} by {{J3n50m4t}}},
  urldate = {2024-05-27},
  abstract = {Little Jig I designed for my Keyring. Works fine with a paper clip.Printed in 0.08 Layer height for better precision.},
  howpublished = {https://makerworld.com/en/models/33199?from=search\#profileId-30020},
  langid = {english}
}

@misc{orlandUnpatchableExploitThat2018,
  title = {The ``Unpatchable'' Exploit That Makes Every Current {{Nintendo Switch}} Hackable [{{Updated}}]},
  author = {Orland, Kyle},
  year = {2018},
  month = apr,
  journal = {Ars Technica},
  urldate = {2024-03-07},
  abstract = {Newly published Tegra bootROM exploit could be a big headache for Nintendo and others.},
  howpublished = {https://arstechnica.com/gaming/2018/04/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/RDT8WQ6L/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable.html}
}

@misc{PicoflyAIOThread,
  title = {Picofly {{AIO Thread}} {\textbar} {{GBAtemp}}.Net - {{The Independent Video Game Community}}},
  urldate = {2024-05-27},
  howpublished = {https://gbatemp.net/threads/picofly-aio-thread.628951/}
}

@book{PlatformEmbeddedSecurity,
  title = {Platform {{Embedded Security Technology Revealed}}},
  urldate = {2024-04-10},
  langid = {english}
}

@article{RadiationHardening2024,
  title = {Radiation Hardening},
  year = {2024},
  month = feb,
  journal = {Wikipedia},
  urldate = {2024-04-15},
  abstract = {Radiation hardening is the process of making electronic components and circuits resistant to damage or malfunction caused by high levels of ionizing radiation (particle radiation and high-energy electromagnetic radiation), especially for environments in outer space (especially beyond the low Earth orbit), around nuclear reactors and particle accelerators, or during nuclear accidents or nuclear warfare. Most semiconductor electronic components are susceptible to radiation damage, and radiation-hardened (rad-hard) components are based on their non-hardened equivalents, with some design and manufacturing variations that reduce the susceptibility to radiation damage. Due to the extensive development and testing required to produce a radiation-tolerant design of a microelectronic chip, the technology of radiation-hardened chips tends to lag behind the most recent developments. Radiation-hardened products are typically tested to one or more resultant-effects tests, including total ionizing dose (TID), enhanced low dose rate effects (ELDRS), neutron and proton displacement damage, and single event effects (SEEs).},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1205501084},
  file = {/home/hectellian/Zotero/storage/GGUFE8VY/Radiation_hardening.html}
}

@inproceedings{raghavanDynamicSchemesSpeculative1998,
  title = {Dynamic Schemes for Speculative Execution of Code},
  booktitle = {Proceedings. {{Sixth International Symposium}} on {{Modeling}}, {{Analysis}} and {{Simulation}} of {{Computer}} and {{Telecommunication Systems}} ({{Cat}}. {{No}}.{{98TB100247}})},
  author = {Raghavan, P. and Shachnai, H. and Yaniv, M.},
  year = {1998},
  month = jul,
  pages = {309--314},
  doi = {10.1109/MASCOT.1998.693711},
  urldate = {2024-04-17},
  abstract = {Speculative execution of code is becoming a key technique for enhancing the performance of pipeline processors. We study schemes that predict the execution path of a program based on the history of branch executions. Building on previous work, we present a model for analyzing the effective speedup from pipelining using various schemes for speculative execution. We follow this with stochastic analyses of various speculative execution schemes. Finally, we conclude with simulations covering several of the settings we study.},
  keywords = {Algorithm design and analysis,Computer interfaces,Hardware,Microprocessors,Optimized production technology,Pipelines,Radio access networks,Runtime,Throughput},
  file = {/home/hectellian/Zotero/storage/969QBSSV/Raghavan et al. - 1998 - Dynamic schemes for speculative execution of code.pdf}
}

@misc{RCMNHSwitch,
  title = {{{RCM}} - {{NH Switch Guide}}},
  urldate = {2024-02-23},
  howpublished = {https://nh-server.github.io/switch-guide/user\_guide/rcm/},
  file = {/home/hectellian/Zotero/storage/NB4B6XCD/rcm.html}
}

@article{RedundancyEngineering2023,
  title = {Redundancy (Engineering)},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  urldate = {2024-05-27},
  abstract = {In engineering and systems theory, redundancy is the intentional duplication of critical components or functions of a system with the goal of increasing reliability of the system, usually in the form of a backup or fail-safe, or to improve actual system performance, such as in the case of GNSS receivers, or multi-threaded computer processing. In many safety-critical systems, such as fly-by-wire and hydraulic systems in aircraft, some parts of the control system may be triplicated, which is formally termed triple modular redundancy (TMR). An error in one component may then be out-voted by the other two. In a triply redundant system, the system has three sub components, all three of which must fail before the system fails. Since each one rarely fails, and the sub components are designed to preclude common failure modes (which can then be modelled as independent failure), the probability of all three failing is calculated to be extraordinarily small; it is often outweighed by other risk factors, such as human error. Electrical surges arising from lightning strikes are an example of a failure mode which is difficult to fully isolate, unless the components are powered from independent power busses and have no direct electrical pathway in their interconnect (communication by some means is required for voting). Redundancy may also be known by the terms "majority voting systems" or "voting logic". Redundancy sometimes produces less, instead of greater reliability --  it creates a more complex system which is prone to various issues, it may lead to human neglect of duty, and may lead to higher production demands which by overstressing the system may make it less safe. Redundancy is one form of robustness as practiced in computer science.  Geographic redundancy has become important in the data center industry, to safeguard data against natural disasters and political instability (see below).},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1188859818}
}

@misc{roussel-tarbouriechMethodicallyDefeatingNintendo2019,
  title = {Methodically {{Defeating Nintendo Switch Security}}},
  author = {{Roussel-Tarbouriech}, Gauvain Tanguy Henri Gabriel Isidore and Menard, Noel and True, Tyler and Vi, Tini and Reisyukaku},
  year = {2019},
  month = jun,
  number = {arXiv:1905.07643},
  eprint = {1905.07643},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1905.07643},
  urldate = {2024-02-23},
  abstract = {We explain, step by step, how we strategically circumvented the Nintendo Switch's system security, from basic userland code execution, to undermining and exposing the secrets of the security co-processor. To this end, we've identified and utilized two distinct analysis procedures. The software-based analysis suffices for reverse-engineering the userland and operating system services, and is necessary for a general architectural understanding of the software systems in the Nintendo Switch. While this method is extremely powerful and provides significant leverage over the control of the system and its software security, a hardware-based method was devised, which employs analysis of the trusted bootstrap code in ROM. This strategy was essential for the goal of defeating the hardware root of trust. Together, these two vectors provide essential insight required to instance a chain of attacks, in order to gain ROP code execution from the context of a high-security mode of a secure co-processor of a running system, thus allowing us to demonstrate a multi-faceted approach on attacking secure, embedded devices in an unfamiliar and novel environment.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/home/hectellian/Zotero/storage/Z9Y9VX4U/Roussel-Tarbouriech et al. - 2019 - Methodically Defeating Nintendo Switch Security.pdf;/home/hectellian/Zotero/storage/MZMFUN4A/1905.html}
}

@article{RowHammer2024,
  title = {Row Hammer},
  year = {2024},
  month = mar,
  journal = {Wikipedia},
  urldate = {2024-04-17},
  abstract = {Row hammer (also written as rowhammer) is a computer security exploit that takes advantage of an unintended and undesirable side effect in dynamic random-access memory (DRAM) in which memory cells interact electrically between themselves by leaking their charges, possibly changing the contents of nearby memory rows that were not addressed in the original memory access. This circumvention of the isolation between DRAM memory cells results from the high cell density in modern DRAM, and can be triggered by specially crafted memory access patterns that rapidly activate the same memory rows numerous times.The row hammer effect has been used in some privilege escalation computer security exploits, and network-based attacks are also theoretically possible.Different hardware-based techniques exist to prevent the row hammer effect from occurring, including required support in some processors and types of DRAM memory modules.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1216563701},
  file = {/home/hectellian/Zotero/storage/2SFRZD2W/Row_hammer.html}
}

@misc{SecureEnclave,
  title = {Secure {{Enclave}}},
  journal = {Apple Support},
  urldate = {2024-05-27},
  abstract = {The Secure Enclave is a dedicated secure subsystem in the latest versions of iPhone, iPad, Mac, Apple TV, Apple Watch, and HomePod.},
  howpublished = {https://support.apple.com/guide/security/secure-enclave-sec59b0b31ff/web},
  langid = {english}
}

@misc{SpectreAttacksExploiting,
  title = {Spectre {{Attacks}}: {{Exploiting Speculative Execution}} {\textbar} {{IEEE Conference Publication}} {\textbar} {{IEEE Xplore}}},
  urldate = {2024-04-10},
  howpublished = {https://ieeexplore.ieee.org/document/8835233},
  file = {/home/hectellian/Zotero/storage/LF42Z552/8835233.html}
}

@article{SpectreSecurityVulnerability2024,
  title = {Spectre (Security Vulnerability)},
  year = {2024},
  month = apr,
  journal = {Wikipedia},
  urldate = {2024-04-15},
  abstract = {Spectre is one of the two original transient execution CPU vulnerabilities (the other being Meltdown), which involve microarchitectural timing side-channel attacks. These affect modern microprocessors that perform branch prediction and other forms of speculation. On most processors, the speculative execution resulting from a branch misprediction may leave observable side effects that may reveal private data to attackers. For example, if the pattern of memory accesses performed by such speculative execution depends on private data, the resulting state of the data cache constitutes a side channel through which an attacker may be able to extract information about the private data using a timing attack.Two Common Vulnerabilities and Exposures IDs related to Spectre, CVE-2017-5753 (bounds check bypass, Spectre-V1, Spectre 1.0) and CVE-2017-5715 (branch target injection, Spectre-V2), have been issued. JIT engines used for JavaScript were found to be vulnerable. A website can read data stored in the browser for another website, or the browser's memory itself.In early 2018, Intel reported that it would redesign its CPUs to help protect against the Spectre and related Meltdown vulnerabilities (especially, Spectre variant 2 and Meltdown, but not Spectre variant 1). On 8 October 2018, Intel was reported to have added hardware and firmware mitigations regarding Spectre and Meltdown vulnerabilities to its latest processors.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1218972533},
  file = {/home/hectellian/Zotero/storage/3C5FJPXS/Spectre_(security_vulnerability).html}
}

@article{SpeculativeExecution2023,
  title = {Speculative Execution},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  urldate = {2024-04-17},
  abstract = {Speculative execution is an optimization technique where a computer system performs some task that may not be needed. Work is done before it is known whether it is actually needed, so as to prevent a delay that would have to be incurred by doing the work after it is known that it is needed. If it turns out the work was not needed after all, most changes made by the work are reverted and the results are ignored. The objective is to provide more concurrency if extra resources are available. This approach is employed in a variety of areas, including branch prediction in pipelined processors, value prediction for exploiting value locality, prefetching memory and files, and optimistic concurrency control in database systems.Speculative multithreading is a special case of speculative execution.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1191590411},
  file = {/home/hectellian/Zotero/storage/GNXY6ZWE/Speculative_execution.html}
}

@misc{SwitchRCMHardmod,
  title = {Switch {{RCM Hardmod Methods}}},
  urldate = {2024-02-23},
  abstract = {Different Methods of Modifying Your Switch to Access RCM.},
  howpublished = {https://noirscape.github.io/RCM-Guide/},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/GU7DF9HW/RCM-Guide.html}
}

@misc{SwitchSystemFlaws,
  title = {Switch {{System Flaws}} - {{Nintendo Switch Brew}}},
  urldate = {2024-03-07},
  howpublished = {https://switchbrew.org/wiki/Switch\_System\_Flaws\#Hardware},
  file = {/home/hectellian/Zotero/storage/GNJ3QXPW/Switch_System_Flaws.html}
}

@inproceedings{tajikPhysicalCharacterizationArbiter2014,
  title = {Physical {{Characterization}} of {{Arbiter PUFs}}},
  booktitle = {Cryptographic {{Hardware}} and {{Embedded Systems}} -- {{CHES}} 2014},
  author = {Tajik, Shahin and Dietz, Enrico and Frohmann, Sven and Seifert, Jean-Pierre and Nedospasov, Dmitry and Helfmeier, Clemens and Boit, Christian and Dittrich, Helmar},
  editor = {Batina, Lejla and Robshaw, Matthew},
  year = {2014},
  pages = {493--509},
  publisher = {Springer},
  address = {Berlin, Heidelberg},
  doi = {10.1007/978-3-662-44709-3_27},
  abstract = {As intended by its name, Physically Unclonable Functions (PUFs) are considered as an ultimate solution to deal with insecure storage, hardware counterfeiting, and many other security problems. However, many different successful attacks have already revealed vulnerabilities of certain digital intrinsic PUFs. Although settling-state-based PUFs, such as SRAM PUFs, can be physically cloned by semi-invasive and fully-invasive attacks, successful attacks on timing-based PUFs were so far limited to modeling attacks. Such modeling requires a large subset of challenge-response-pairs (CRP) to successfully model the targeted PUF. In order to provide a final security answer, this paper proves that all arbiter-based (i.e. controlled and XOR-enhanced) PUFs can be completely and linearly characterized by means of photonic emission analysis. Our experimental setup is capable of measuring every PUF-internal delay with a resolution of 6 picoseconds. Due to this resolution we indeed require only the theoretical minimum number of linear independent equations (i.e. physical measurements) to directly solve the underlying inhomogeneous linear system. Moreover, we neither require to know the actual PUF challenges nor the corresponding PUF responses for our physical delay extraction. On top of that devastating result, we are also able to further simplify our setup for easier physical measurement handling. We present our practical results for a real arbiter PUF implementation on a Complex Programmable Logic Device (CPLD) from Altera manufactured in a 180 nanometer process.},
  isbn = {978-3-662-44709-3},
  langid = {english},
  keywords = {Arbiter PUF,backside,photonic emission analysis,physical characterization},
  file = {/home/hectellian/Zotero/storage/JFZIHHNR/Tajik et al. - 2014 - Physical Characterization of Arbiter PUFs.pdf}
}

@misc{teamInfineonRSAKey2017,
  title = {Infineon {{RSA Key Generation Issue}}},
  author = {Team, Yubico},
  year = {2017},
  month = oct,
  journal = {Yubico},
  urldate = {2024-04-10},
  abstract = {We are committed to always improving how we protect our customers, and continuously invest in making our products even more secure.},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/GBVZ695Y/infineon-rsa-key-generation-issue.html}
}

@book{usenixassociationProceedingsSeventeenthLarge2003,
  title = {Proceedings of the {{Seventeenth Large Installation Systems Administration Conference}} ({{LISA XVII}}): {{October}} 26 - 31, 2003, {{San Diego}}, {{CA}}, {{USA}}},
  shorttitle = {Proceedings of the {{Seventeenth Large Installation Systems Administration Conference}} ({{LISA XVII}})},
  editor = {{USENIX Association}},
  year = {2003},
  publisher = {USENIX Association},
  address = {Berkeley, Calif},
  isbn = {978-1-931971-15-7},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/LAS8EEU7/USENIX Association - 2003 - Proceedings of the Seventeenth Large Installation .pdf}
}

@article{vadnalaAttackingOpenSSLUsing,
  title = {Attacking {{OpenSSL}} Using {{Side-channel Attacks}}: The {{RSA}} Case Study},
  author = {Vadnala, Praveen Kumar and Chmielewski, Lukasz},
  abstract = {We show that RSA implementation present in OpenSSL can be successfully attacked using sidechannels. In OpenSSL, the modular exponentiation is implemented using m-ary method, where a table of size 2m entries is precomputed. The exponent is divided into words of m-bits each and the algorithm proceeds one word at a time using the precomputed table. Furthermore, to protect against side-channel attacks, it implements message blinding countermeasure.},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/7XZUQNIF/Vadnala and Chmielewski - Attacking OpenSSL using Side-channel Attacks the .pdf}
}

@misc{valentinoDomilxSwitchBrewDocs2024,
  title = {Domilx/{{SwitchBrewDocs}}},
  author = {Valentino, Domenico},
  year = {2024},
  month = mar,
  urldate = {2024-04-10},
  abstract = {A comprehensive A to Z guide for switch hacking},
  copyright = {MIT},
  keywords = {guide,homebrew,readthedocs,switch}
}

@misc{vinaypamnani-msftWindowsDefenderApplication2024,
  title = {Windows {{Defender Application Control}} and Virtualization-Based Code Integrity - {{Windows Security}}},
  author = {{vinaypamnani-msft}},
  year = {2024},
  month = mar,
  urldate = {2024-04-10},
  abstract = {Hardware and software system integrity-hardening capabilities that can be deployed separately or in combination with Windows Defender Application Control (WDAC).},
  howpublished = {https://learn.microsoft.com/en-us/windows/security/application-security/application-control/introduction-to-device-guard-virtualization-based-security-and-windows-defender-application-control},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/J8LKWSIW/introduction-to-device-guard-virtualization-based-security-and-windows-defender-application-con.html}
}

@misc{WaybackMachine2019,
  title = {Wayback {{Machine}}},
  year = {2019},
  month = dec,
  urldate = {2024-03-06},
  howpublished = {https://web.archive.org/web/20191204111041/https://misc.ktemkin.com/fusee\_gelee\_nvidia.pdf},
  file = {/home/hectellian/Zotero/storage/G4YIK8Y9/2019 - Wayback Machine.pdf}
}

@misc{WelcomeJetsonLinuxDeveloper,
  title = {Welcome --- {{Jetson Linux}}{$<$}br/{$>$}{{Developer Guide}} 34.1 Documentation},
  urldate = {2024-05-27},
  howpublished = {https://docs.nvidia.com/jetson/archives/r34.1/DeveloperGuide/index.html\#page/Tegra\%20Linux\%20Driver\%20Package\%20Development\%20Guide/bootflow\_tx2.html}
}

@misc{WhatFirmware2013,
  title = {{What is firmware?}},
  year = {2013},
  month = jan,
  journal = {incepator.pinzaru.ro},
  urldate = {2024-04-17},
  abstract = {Firmware is the basic software embedded in a hardware device. Firmware - essential software routines contained in~ROM~memory ~of a hardware device. Firmware is always responsible for basic operations, such as starting or input / output. We can say, without fail, that any electronic device~ needs~firmware to operate. Firmware range from a reduced set of instructions{\dots}},
  chapter = {EN},
  langid = {en, sv},
  file = {/home/hectellian/Zotero/storage/RJK79ZFB/what-is-firmware.html}
}

@misc{wololoHowHackYour2023,
  title = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}: {{Picofly}}, {{HWFLY}}, {{RCM}}, {{OLED}}, Unpatched vs Patched... Trying to Clear It up for You},
  shorttitle = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}},
  author = {{wololo}},
  year = {2023},
  month = apr,
  journal = {Wololo.net},
  urldate = {2024-03-27},
  abstract = {It's time to update our now traditional ``how to hack your Nintendo Switch'' article, with the latest data available as of 2023. Not much has changed since last year in ``how'' it's done, however...},
  howpublished = {https://wololo.net/2023/04/10/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-trying-to-clear-it-up-for-you/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/GRS82ELA/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-tryin.html}
}
