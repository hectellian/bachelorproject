@misc{HowDidNintendo2020,
  title = {How Did {{Nintendo}} Patch the {{RCM}} Exploit?},
  year = {2020},
  month = aug,
  journal = {GBAtemp.net - The Independent Video Game Community},
  urldate = {2024-02-23},
  abstract = {I'd like to know how it worked in the first place and what they did to fix it I'd also like to know how SX's chip works, what is it doing to the Switch? And is there hope for an exploit similar to the RCM exploit in the future? I'm guessing the answer is no but I'll ask anyway If anyone has...},
  howpublished = {https://gbatemp.net/threads/how-did-nintendo-patch-the-rcm-exploit.571615/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/NR9QQGLG/how-did-nintendo-patch-the-rcm-exploit.571615.html}
}

@misc{kocherSpectreAttacksExploiting2018,
  title = {Spectre {{Attacks}}: {{Exploiting Speculative Execution}}},
  shorttitle = {Spectre {{Attacks}}},
  author = {Kocher, Paul and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access to the victim's memory and registers, and can perform operations with measurable side effects. Spectre attacks involve inducing a victim to speculatively perform operations that would not occur during correct program execution and which leak the victim's confidential information via a side channel to the adversary. This paper describes practical attacks that combine methodology from side channel attacks, fault attacks, and return-oriented programming that can read arbitrary memory from the victim's process. More broadly, the paper shows that speculative execution implementations violate the security assumptions underpinning numerous software security mechanisms, including operating system process separation, static analysis, containerization, just-in-time (JIT) compilation, and countermeasures to cache timing/side-channel attacks. These attacks represent a serious threat to actual systems, since vulnerable speculative execution capabilities are found in microprocessors from Intel, AMD, and ARM that are used in billions of devices. While makeshift processor-specific countermeasures are possible in some cases, sound solutions will require fixes to processor designs as well as updates to instruction set architectures (ISAs) to give hardware architects and software developers a common understanding as to what computation state CPU implementations are (and are not) permitted to leak.},
  howpublished = {https://arxiv.org/abs/1801.01203v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/8LSQ7BNN/Kocher et al. - 2018 - Spectre Attacks Exploiting Speculative Execution.pdf}
}

@misc{lippMeltdown2018,
  title = {Meltdown},
  author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {The security of computer systems fundamentally relies on memory isolation, e.g., kernel address ranges are marked as non-accessible and are protected from user access. In this paper, we present Meltdown. Meltdown exploits side effects of out-of-order execution on modern processors to read arbitrary kernel-memory locations including personal data and passwords. Out-of-order execution is an indispensable performance feature and present in a wide range of modern processors. The attack works on different Intel microarchitectures since at least 2010 and potentially other processors are affected. The root cause of Meltdown is the hardware. The attack is independent of the operating system, and it does not rely on any software vulnerabilities. Meltdown breaks all security assumptions given by address space isolation as well as paravirtualized environments and, thus, every security mechanism building upon this foundation. On affected systems, Meltdown enables an adversary to read memory of other processes or virtual machines in the cloud without any permissions or privileges, affecting millions of customers and virtually every user of a personal computer. We show that the KAISER defense mechanism for KASLR has the important (but inadvertent) side effect of impeding Meltdown. We stress that KAISER must be deployed immediately to prevent large-scale exploitation of this severe information leakage.},
  howpublished = {https://arxiv.org/abs/1801.01207v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/4235IMHY/Lipp et al. - 2018 - Meltdown.pdf}
}

@misc{orlandUnpatchableExploitThat2018,
  title = {The ``Unpatchable'' Exploit That Makes Every Current {{Nintendo Switch}} Hackable [{{Updated}}]},
  author = {Orland, Kyle},
  year = {2018},
  month = apr,
  journal = {Ars Technica},
  urldate = {2024-03-07},
  abstract = {Newly published Tegra bootROM exploit could be a big headache for Nintendo and others.},
  howpublished = {https://arstechnica.com/gaming/2018/04/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/RDT8WQ6L/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable.html}
}

@misc{RCMNHSwitch,
  title = {{{RCM}} - {{NH Switch Guide}}},
  urldate = {2024-02-23},
  howpublished = {https://nh-server.github.io/switch-guide/user\_guide/rcm/},
  file = {/home/hectellian/Zotero/storage/NB4B6XCD/rcm.html}
}

@misc{roussel-tarbouriechMethodicallyDefeatingNintendo2019,
  title = {Methodically {{Defeating Nintendo Switch Security}}},
  author = {{Roussel-Tarbouriech}, Gauvain Tanguy Henri Gabriel Isidore and Menard, Noel and True, Tyler and Vi, Tini and Reisyukaku},
  year = {2019},
  month = jun,
  number = {arXiv:1905.07643},
  eprint = {1905.07643},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1905.07643},
  urldate = {2024-02-23},
  abstract = {We explain, step by step, how we strategically circumvented the Nintendo Switch's system security, from basic userland code execution, to undermining and exposing the secrets of the security co-processor. To this end, we've identified and utilized two distinct analysis procedures. The software-based analysis suffices for reverse-engineering the userland and operating system services, and is necessary for a general architectural understanding of the software systems in the Nintendo Switch. While this method is extremely powerful and provides significant leverage over the control of the system and its software security, a hardware-based method was devised, which employs analysis of the trusted bootstrap code in ROM. This strategy was essential for the goal of defeating the hardware root of trust. Together, these two vectors provide essential insight required to instance a chain of attacks, in order to gain ROP code execution from the context of a high-security mode of a secure co-processor of a running system, thus allowing us to demonstrate a multi-faceted approach on attacking secure, embedded devices in an unfamiliar and novel environment.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/home/hectellian/Zotero/storage/Z9Y9VX4U/Roussel-Tarbouriech et al. - 2019 - Methodically Defeating Nintendo Switch Security.pdf;/home/hectellian/Zotero/storage/MZMFUN4A/1905.html}
}

@misc{SwitchRCMHardmod,
  title = {Switch {{RCM Hardmod Methods}}},
  urldate = {2024-02-23},
  abstract = {Different Methods of Modifying Your Switch to Access RCM.},
  howpublished = {https://noirscape.github.io/RCM-Guide/},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/GU7DF9HW/RCM-Guide.html}
}

@misc{SwitchSystemFlaws,
  title = {Switch {{System Flaws}} - {{Nintendo Switch Brew}}},
  urldate = {2024-03-07},
  howpublished = {https://switchbrew.org/wiki/Switch\_System\_Flaws\#Hardware},
  file = {/home/hectellian/Zotero/storage/GNJ3QXPW/Switch_System_Flaws.html}
}

@misc{WaybackMachine2019,
  title = {Wayback {{Machine}}},
  year = {2019},
  month = dec,
  urldate = {2024-03-06},
  howpublished = {https://web.archive.org/web/20191204111041/https://misc.ktemkin.com/fusee\_gelee\_nvidia.pdf},
  file = {/home/hectellian/Zotero/storage/G4YIK8Y9/2019 - Wayback Machine.pdf}
}

@misc{wololoHowHackYour2023,
  title = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}: {{Picofly}}, {{HWFLY}}, {{RCM}}, {{OLED}}, Unpatched vs Patched... Trying to Clear It up for You},
  shorttitle = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}},
  author = {{wololo}},
  year = {2023},
  month = apr,
  journal = {Wololo.net},
  urldate = {2024-03-27},
  abstract = {It's time to update our now traditional ``how to hack your Nintendo Switch'' article, with the latest data available as of 2023. Not much has changed since last year in ``how'' it's done, however...},
  howpublished = {https://wololo.net/2023/04/10/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-trying-to-clear-it-up-for-you/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/GRS82ELA/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-tryin.html}
}
