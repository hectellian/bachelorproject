@book{bhuniaHardwareSecurityHandson2018,
  title = {Hardware {{Security}}: {{A Hands-on Learning Approach}}},
  shorttitle = {Hardware {{Security}}},
  author = {Bhunia, Swarup and Tehranipoor, Mark},
  year = {2018},
  month = oct,
  edition = {1st},
  publisher = {Morgan Kaufmann Publishers Inc.},
  address = {San Francisco, CA, USA},
  abstract = {Hardware Security: A Hands-On Learning Approach provides a broad, comprehensive and practical overview of hardware security that encompasses all levels of the electronic hardware infrastructure. It covers basic concepts like advanced attack techniques and countermeasures that are illustrated through theory, case studies and well-designed, hands-on laboratory exercises for each key concept. The book is ideal as a textbook for upper-level undergraduate students studying computer engineering, computer science, electrical engineering, and biomedical engineering, but is also a handy reference for graduate students, researchers and industry professionals. For academic courses, the book contains a robust suite of teaching ancillaries. Users will be able to access schematic, layout and design files for a printed circuit board for hardware hacking (i.e. the HaHa board) that can be used by instructors to fabricate boards, a suite of videos that demonstrate different hardware vulnerabilities, hardware attacks and countermeasures, and a detailed description and user manual for companion materials. Provides a thorough overview of computer hardware, including the fundamentals of computer systems and the implications of security risks Includes discussion of the liability, safety and privacy implications of hardware and software security and interaction Gives insights on a wide range of security, trust issues and emerging attacks and protection mechanisms in the electronic hardware lifecycle, from design, fabrication, test, and distribution, straight through to supply chain and deployment in the field},
  isbn = {978-0-12-812477-2}
}

@inproceedings{changSecureSystemDesign2016,
  title = {Secure {{System Design}} and {{Trustable Computing}}},
  editor = {Chang, Chip-Hong and Potkonjak, Miodrag},
  year = {2016},
  publisher = {Springer International Publishing},
  address = {Cham},
  doi = {10.1007/978-3-319-14971-4},
  urldate = {2024-04-10},
  abstract = {This book provides the foundations for understanding hardware security and trust, which have become major concerns for national security over the past decade. Coverage includes issues related to security and trust in a variety of electronic devices and systems related to the security of hardware, firmware and software, spanning system applications, online transactions and networking services. This serves as an invaluable reference to the state-of-the-art research that is of critical significance to the security of and trust in, modern societys microelectronic-supported infrastructures.},
  copyright = {https://www.springernature.com/gp/researchers/text-and-data-mining},
  isbn = {978-3-319-14970-7 978-3-319-14971-4},
  langid = {english}
}

@misc{computersecuritydivisionHardwareSecurityCSRC2022,
  title = {Hardware {{Security}} {\textbar} {{CSRC}} {\textbar} {{CSRC}}},
  author = {Computer Security Division, Information Technology Laboratory},
  year = {2022},
  month = may,
  journal = {CSRC {\textbar} NIST},
  urldate = {2024-04-10},
  abstract = {Proposed Activities {\textbar} Previous and Current Activities {\textbar} Contact Us    Semiconductor-based hardware is the foundation of modern-day electronics. Electronics are ubiquitous in our daily lives: from smartphones, computers, and telecommunication to transportation and critical infrastructure like power grids and waterways. The semiconductor hardware supply chain is a complex network consisting of many companies that collectively provide intellectual property, create designs, provide raw materials, and manufacture, test, package, and distribute products. Coordination among these companies is required at different stages from inception to end user, as well as maintenance during use and eventually disposal or end of life. Securing semiconductors and hardware and their supply chains helps protect sensitive information, maintain integrity of systems, and ensure overall stability across the infrastructure and connected world.  NIST's Hardware Security Program builds on NIST leadership, expertise, and experience in...},
  howpublished = {https://csrc.nist.gov/projects/hardware-security},
  langid = {american}
}

@misc{ctoHistoryHardwareSecurity2022,
  title = {A {{History}} of {{Hardware Security}} and {{What}} It {{Means}} for {{Today}}'s {{Systems}}},
  author = {CTO, Cofounder and, Jason Oberg},
  year = {2022},
  month = mar,
  journal = {Cycuity},
  urldate = {2024-04-10},
  abstract = {Although semiconductors provide the foundation of every modern electronic computing system, it's difficult for most people to imagine the consequences of a hardware security incident on their own lives.},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/8NVIKFBS/history-of-hardware-security.html}
}

@misc{editorsChallengesSecuringToday2021,
  title = {The {{Challenges}} of {{Securing Today}}'s {{Hardware Technologies}} (and {{How}} to {{Overcome Them}})},
  author = {EDITORS, eWEEK},
  year = {2021},
  month = nov,
  journal = {eWEEK},
  urldate = {2024-04-10},
  abstract = {Factors like new, disruptive research and an expanding risk factor make securing hardware a major challenge --~yet security can be greatly improved.},
  howpublished = {https://www.eweek.com/security/the-challenges-of-securing-todays-hardware-technologies-and-how-to-overcome-them/},
  langid = {american}
}

@book{ericksonHackingArtExploitation2008,
  title = {Hacking : The Art of Exploitation},
  shorttitle = {Hacking},
  author = {Erickson, Jon},
  year = {2008},
  publisher = {San Francisco, Calif. : No Starch Press},
  urldate = {2024-04-10},
  abstract = {Hacking the art of Exploitation; 1 online resource (x, 472 pages) :; Hacking is the art of creative problem solving, whether that means finding an unconventional solution to a difficult problem or exploiting holes in sloppy programming. Rather than merely showing how to run existing exploits, Hacking: The Art of Exploitation, 2nd Edition author Jon Erickson explains how arcane hacking techniques actually work. Using the included Ubuntu LiveCD, get your hands dirty debugging code, overflowing buffers, hijacking network communications, bypassing protections, exploiting cryptographic weaknesses, and perhaps even inventing new exploits; Includes bibliographical references and index; 1. Introduction -- 2. Programming -- 3. Exploitation -- 4. Networking -- 5. Shellcode -- 6. Countermeasures -- 7. Cryptology -- 8. Conclusion; Print version record},
  isbn = {978-1-59327-338-5 978-1-59327-144-2},
  langid = {english},
  keywords = {Hacking}
}

@article{HardwareSecurity2023,
  title = {Hardware Security},
  year = {2023},
  month = dec,
  journal = {Wikipedia},
  urldate = {2024-04-10},
  abstract = {Hardware security is a discipline originated from the cryptographic engineering and involves hardware design, access control, secure multi-party computation, secure key storage, ensuring code authenticity, measures to ensure that the supply chain that built the product is secure among other things.A hardware security module (HSM) is a physical computing device that safeguards and manages digital keys for strong authentication and provides cryptoprocessing. These modules traditionally come in the form of a plug-in card or an external device that attaches directly to a computer or network server. Some providers in this discipline consider that the key difference between hardware security and software security is that hardware security is implemented using "non-Turing-machine" logic (raw combinatorial logic or simple state machines). One approach, referred to as "hardsec", uses FPGAs to implement non-Turing-machine security controls as a way of combining the security of hardware with the flexibility of software.Hardware backdoors are backdoors in hardware. Conceptionally related, a hardware Trojan (HT) is a malicious modification of electronic system, particularly in the context of integrated circuit.A physical unclonable function (PUF) is a physical entity that is embodied in a physical structure and is easy to evaluate but hard to predict. Further, an individual PUF device must be easy to make but practically impossible to duplicate, even given the exact manufacturing process that produced it. In this respect it is the hardware analog of a one-way function. The name "physical unclonable function" might be a little misleading as some PUFs are clonable, and most PUFs are noisy and therefore do not achieve the requirements for a function. Today, PUFs are usually implemented in integrated circuits and are typically used in applications with high security requirements. Many attacks on sensitive data and resources reported by organizations occur from within the organization itself.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1191140417},
  file = {/home/hectellian/Zotero/storage/UJ36N7E4/Hardware_security.html}
}

@misc{HowDidNintendo2020,
  title = {How Did {{Nintendo}} Patch the {{RCM}} Exploit?},
  year = {2020},
  month = aug,
  journal = {GBAtemp.net - The Independent Video Game Community},
  urldate = {2024-02-23},
  abstract = {I'd like to know how it worked in the first place and what they did to fix it I'd also like to know how SX's chip works, what is it doing to the Switch? And is there hope for an exploit similar to the RCM exploit in the future? I'm guessing the answer is no but I'll ask anyway If anyone has...},
  howpublished = {https://gbatemp.net/threads/how-did-nintendo-patch-the-rcm-exploit.571615/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/NR9QQGLG/how-did-nintendo-patch-the-rcm-exploit.571615.html}
}

@book{IntroductionHardwareSecurity,
  title = {Introduction to {{Hardware Security}} and {{Trust}}},
  urldate = {2024-04-10},
  langid = {english}
}

@article{jinIntroductionHardwareSecurity2015,
  title = {Introduction to {{Hardware Security}}},
  author = {Jin, Yier},
  year = {2015},
  month = dec,
  journal = {Electronics},
  volume = {4},
  number = {4},
  pages = {763--784},
  publisher = {Multidisciplinary Digital Publishing Institute},
  issn = {2079-9292},
  doi = {10.3390/electronics4040763},
  urldate = {2024-04-10},
  abstract = {Hardware security has become a hot topic recently with more and more researchers from related research domains joining this area. However, the understanding of hardware security is often mixed with cybersecurity and cryptography, especially cryptographic hardware. For the same reason, the research scope of hardware security has never been clearly defined. To help researchers who have recently joined in this area better understand the challenges and tasks within the hardware security domain and to help both academia and industry investigate countermeasures and solutions to solve hardware security problems, we will introduce the key concepts of hardware security as well as its relations to related research topics in this survey paper. Emerging hardware security topics will also be clearly depicted through which the future trend will be elaborated, making this survey paper a good reference for the continuing research efforts in this area.},
  copyright = {http://creativecommons.org/licenses/by/3.0/},
  langid = {english},
  keywords = {hardware security,hardware trojan,proof-carrying hardware,trusted hardware platform},
  file = {/home/hectellian/Zotero/storage/ZHEKFKVH/Jin - 2015 - Introduction to Hardware Security.pdf}
}

@misc{kocherSpectreAttacksExploiting2018,
  title = {Spectre {{Attacks}}: {{Exploiting Speculative Execution}}},
  shorttitle = {Spectre {{Attacks}}},
  author = {Kocher, Paul and Genkin, Daniel and Gruss, Daniel and Haas, Werner and Hamburg, Mike and Lipp, Moritz and Mangard, Stefan and Prescher, Thomas and Schwarz, Michael and Yarom, Yuval},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {Modern processors use branch prediction and speculative execution to maximize performance. For example, if the destination of a branch depends on a memory value that is in the process of being read, CPUs will try guess the destination and attempt to execute ahead. When the memory value finally arrives, the CPU either discards or commits the speculative computation. Speculative logic is unfaithful in how it executes, can access to the victim's memory and registers, and can perform operations with measurable side effects. Spectre attacks involve inducing a victim to speculatively perform operations that would not occur during correct program execution and which leak the victim's confidential information via a side channel to the adversary. This paper describes practical attacks that combine methodology from side channel attacks, fault attacks, and return-oriented programming that can read arbitrary memory from the victim's process. More broadly, the paper shows that speculative execution implementations violate the security assumptions underpinning numerous software security mechanisms, including operating system process separation, static analysis, containerization, just-in-time (JIT) compilation, and countermeasures to cache timing/side-channel attacks. These attacks represent a serious threat to actual systems, since vulnerable speculative execution capabilities are found in microprocessors from Intel, AMD, and ARM that are used in billions of devices. While makeshift processor-specific countermeasures are possible in some cases, sound solutions will require fixes to processor designs as well as updates to instruction set architectures (ISAs) to give hardware architects and software developers a common understanding as to what computation state CPU implementations are (and are not) permitted to leak.},
  howpublished = {https://arxiv.org/abs/1801.01203v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/8LSQ7BNN/Kocher et al. - 2018 - Spectre Attacks Exploiting Speculative Execution.pdf}
}

@misc{lippMeltdown2018,
  title = {Meltdown},
  author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
  year = {2018},
  month = jan,
  journal = {arXiv.org},
  urldate = {2024-03-07},
  abstract = {The security of computer systems fundamentally relies on memory isolation, e.g., kernel address ranges are marked as non-accessible and are protected from user access. In this paper, we present Meltdown. Meltdown exploits side effects of out-of-order execution on modern processors to read arbitrary kernel-memory locations including personal data and passwords. Out-of-order execution is an indispensable performance feature and present in a wide range of modern processors. The attack works on different Intel microarchitectures since at least 2010 and potentially other processors are affected. The root cause of Meltdown is the hardware. The attack is independent of the operating system, and it does not rely on any software vulnerabilities. Meltdown breaks all security assumptions given by address space isolation as well as paravirtualized environments and, thus, every security mechanism building upon this foundation. On affected systems, Meltdown enables an adversary to read memory of other processes or virtual machines in the cloud without any permissions or privileges, affecting millions of customers and virtually every user of a personal computer. We show that the KAISER defense mechanism for KASLR has the important (but inadvertent) side effect of impeding Meltdown. We stress that KAISER must be deployed immediately to prevent large-scale exploitation of this severe information leakage.},
  howpublished = {https://arxiv.org/abs/1801.01207v1},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/4235IMHY/Lipp et al. - 2018 - Meltdown.pdf}
}

@misc{orlandUnpatchableExploitThat2018,
  title = {The ``Unpatchable'' Exploit That Makes Every Current {{Nintendo Switch}} Hackable [{{Updated}}]},
  author = {Orland, Kyle},
  year = {2018},
  month = apr,
  journal = {Ars Technica},
  urldate = {2024-03-07},
  abstract = {Newly published Tegra bootROM exploit could be a big headache for Nintendo and others.},
  howpublished = {https://arstechnica.com/gaming/2018/04/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/RDT8WQ6L/the-unpatchable-exploit-that-makes-every-current-nintendo-switch-hackable.html}
}

@book{PlatformEmbeddedSecurity,
  title = {Platform {{Embedded Security Technology Revealed}}},
  urldate = {2024-04-10},
  langid = {english}
}

@misc{RCMNHSwitch,
  title = {{{RCM}} - {{NH Switch Guide}}},
  urldate = {2024-02-23},
  howpublished = {https://nh-server.github.io/switch-guide/user\_guide/rcm/},
  file = {/home/hectellian/Zotero/storage/NB4B6XCD/rcm.html}
}

@misc{roussel-tarbouriechMethodicallyDefeatingNintendo2019,
  title = {Methodically {{Defeating Nintendo Switch Security}}},
  author = {{Roussel-Tarbouriech}, Gauvain Tanguy Henri Gabriel Isidore and Menard, Noel and True, Tyler and Vi, Tini and Reisyukaku},
  year = {2019},
  month = jun,
  number = {arXiv:1905.07643},
  eprint = {1905.07643},
  primaryclass = {cs},
  publisher = {arXiv},
  doi = {10.48550/arXiv.1905.07643},
  urldate = {2024-02-23},
  abstract = {We explain, step by step, how we strategically circumvented the Nintendo Switch's system security, from basic userland code execution, to undermining and exposing the secrets of the security co-processor. To this end, we've identified and utilized two distinct analysis procedures. The software-based analysis suffices for reverse-engineering the userland and operating system services, and is necessary for a general architectural understanding of the software systems in the Nintendo Switch. While this method is extremely powerful and provides significant leverage over the control of the system and its software security, a hardware-based method was devised, which employs analysis of the trusted bootstrap code in ROM. This strategy was essential for the goal of defeating the hardware root of trust. Together, these two vectors provide essential insight required to instance a chain of attacks, in order to gain ROP code execution from the context of a high-security mode of a secure co-processor of a running system, thus allowing us to demonstrate a multi-faceted approach on attacking secure, embedded devices in an unfamiliar and novel environment.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Cryptography and Security},
  file = {/home/hectellian/Zotero/storage/Z9Y9VX4U/Roussel-Tarbouriech et al. - 2019 - Methodically Defeating Nintendo Switch Security.pdf;/home/hectellian/Zotero/storage/MZMFUN4A/1905.html}
}

@misc{SwitchRCMHardmod,
  title = {Switch {{RCM Hardmod Methods}}},
  urldate = {2024-02-23},
  abstract = {Different Methods of Modifying Your Switch to Access RCM.},
  howpublished = {https://noirscape.github.io/RCM-Guide/},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/GU7DF9HW/RCM-Guide.html}
}

@misc{SwitchSystemFlaws,
  title = {Switch {{System Flaws}} - {{Nintendo Switch Brew}}},
  urldate = {2024-03-07},
  howpublished = {https://switchbrew.org/wiki/Switch\_System\_Flaws\#Hardware},
  file = {/home/hectellian/Zotero/storage/GNJ3QXPW/Switch_System_Flaws.html}
}

@book{usenixassociationProceedingsSeventeenthLarge2003,
  title = {Proceedings of the {{Seventeenth Large Installation Systems Administration Conference}} ({{LISA XVII}}): {{October}} 26 - 31, 2003, {{San Diego}}, {{CA}}, {{USA}}},
  shorttitle = {Proceedings of the {{Seventeenth Large Installation Systems Administration Conference}} ({{LISA XVII}})},
  editor = {{USENIX Association}},
  year = {2003},
  publisher = {USENIX Association},
  address = {Berkeley, Calif},
  isbn = {978-1-931971-15-7},
  langid = {english},
  file = {/home/hectellian/Zotero/storage/LAS8EEU7/USENIX Association - 2003 - Proceedings of the Seventeenth Large Installation .pdf}
}

@misc{valentinoDomilxSwitchBrewDocs2024,
  title = {Domilx/{{SwitchBrewDocs}}},
  author = {Valentino, Domenico},
  year = {2024},
  month = mar,
  urldate = {2024-04-10},
  abstract = {A comprehensive A to Z guide for switch hacking},
  copyright = {MIT},
  keywords = {guide,homebrew,readthedocs,switch}
}

@misc{WaybackMachine2019,
  title = {Wayback {{Machine}}},
  year = {2019},
  month = dec,
  urldate = {2024-03-06},
  howpublished = {https://web.archive.org/web/20191204111041/https://misc.ktemkin.com/fusee\_gelee\_nvidia.pdf},
  file = {/home/hectellian/Zotero/storage/G4YIK8Y9/2019 - Wayback Machine.pdf}
}

@misc{wololoHowHackYour2023,
  title = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}: {{Picofly}}, {{HWFLY}}, {{RCM}}, {{OLED}}, Unpatched vs Patched... Trying to Clear It up for You},
  shorttitle = {How to Hack Your {{Nintendo Switch}}, 2023 {{Edition}}},
  author = {{wololo}},
  year = {2023},
  month = apr,
  journal = {Wololo.net},
  urldate = {2024-03-27},
  abstract = {It's time to update our now traditional ``how to hack your Nintendo Switch'' article, with the latest data available as of 2023. Not much has changed since last year in ``how'' it's done, however...},
  howpublished = {https://wololo.net/2023/04/10/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-trying-to-clear-it-up-for-you/},
  langid = {american},
  file = {/home/hectellian/Zotero/storage/GRS82ELA/how-to-hack-your-nintendo-switch-2023-edition-picofly-hwfly-rcm-oled-unpatched-vs-patched-tryin.html}
}
